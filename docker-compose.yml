networks:
  homelab:
    driver: bridge


services:
  # =============================================================================
  # REVERSE PROXY - CADDY
  # =============================================================================
  caddy:
    container_name: caddy
    image: caddy:2-alpine
    restart: unless-stopped
    networks:
        - homelab
    ports:
      - "127.0.0.1:8082:8082"
      - "127.0.0.1:8081:8081"
      - "127.0.0.1:8083:8083"
      - "127.0.0.1:8080:8080"   # if you want Caddy to accept files.hamishburke.dev on 8080
    volumes:
        - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
        - ./caddy/data:/data
        - ./caddy/config:/config
    environment:
        - CADDY_EMAIL=${CADDY_EMAIL}


  # =============================================================================
  # IMMICH SERVICES
  # =============================================================================
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    networks:
      - homelab
    volumes:
      - ${IMMICH_UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
      - /srv/hamish/files/Photos:/usr/src/app/upload/library/hamish:rw
      - /srv/will/files/photos:/usr/src/app/upload/library/will:rw
    environment:
      - DB_HOSTNAME=immich-postgres
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE_NAME=${DB_DATABASE_NAME}
      - REDIS_HOSTNAME=immich-redis
      - MACHINE_LEARNING_URL=http://immich-machine-learning:3003
      - IMMICH_TRUSTED_PROXIES=172.16.0.0/12,192.168.0.0/16,10.0.0.0/8
    depends_on:
      - immich-redis
      - immich-postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/server-info/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    networks:
      - homelab
    volumes:
      - ${IMMICH_ML_CACHE}:/cache
    environment:
      - TRANSFORMERS_CACHE=/cache
      - MPLCONFIGDIR=/cache/.config
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:3003/ping', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  immich-redis:
    container_name: immich_redis
    image: redis:7-alpine
    networks:
      - homelab
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  immich-postgres:
    container_name: immich_postgres
    image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0
    networks:
      - homelab
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_DB=${DB_DATABASE_NAME}
      - POSTGRES_INITDB_ARGS='--data-checksums'
    volumes:
      - ./immich/db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # RADICALE (CalDAV)
  # =============================================================================
  radicale:
    container_name: radicale
    image: tomsquest/docker-radicale:latest
    networks:
      - homelab
    environment:
      - TAKE_FILE_OWNERSHIP=false
    volumes:
      - ./radicale/data:/data
      - ./radicale/config:/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5232"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # MINECRAFT SERVER
  # =============================================================================
  minecraft:
    container_name: minecraft
    image: itzg/minecraft-server:latest
    networks:
      - homelab
    ports:
      - "25565:25565"
    environment:
      - EULA=${EULA}
      - MEMORY=${MC_MEMORY}
      - VERSION=${MC_VERSION}
      - TYPE=${MC_TYPE}
      - DIFFICULTY=${MC_DIFFICULTY}
      - MAX_PLAYERS=${MC_MAX_PLAYERS}
      - MOTD=${MC_MOTD}
      - ENABLE_RCON=true
      - RCON_PASSWORD=your_rcon_password_here
      - RCON_PORT=25575
      - USE_AIKAR_FLAGS=true
      - ENABLE_AUTOPAUSE=false
      - MAX_TICK_TIME=-1
    volumes: 
      - ./minecraft/data:/data
    healthcheck:
      test: ["CMD", "mc-health"]
      interval: 30s
      timeout: 20s
      retries: 10
    restart: unless-stopped

  # =============================================================================
  # MINECRAFT CONTROL API
  # =============================================================================
  mccontrol:
    container_name: mccontrol
    build: ./mccontrol
    networks:
      - homelab
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # let it control Docker
    ports:
      - "5000:5000"
    restart: unless-stopped


  # =============================================================================
  # DASHBOARD
  # =============================================================================
  dashboard:
    container_name: dashboard
    image: b4bz/homer:latest
    networks:
      - homelab
    volumes:
      - ./dashboard/assets:/www/assets
    environment:
      - INIT_ASSETS=0
      - PORT=8082
    restart: unless-stopped

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    networks:
      - homelab
    restart: unless-stopped
    # expose ports locally if you ever want direct access; Caddy will proxy to 9000
    ports:
      - "8000:8000"   # edge agent (optional)
      - "9443:9443"   # HTTPS UI (newer Portainer)
      - "9000:9000"   # HTTP UI (proxied by Caddy)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  filegator:
    container_name: filegator
    image: filegator/filegator:latest
    platform: linux/amd64
    restart: unless-stopped
    networks:
      - homelab
    volumes:
      - /srv/hamish/files:/var/www/filegator/repository/hamish:rw
      - /srv/will_mapped/files:/var/www/filegator/repository/will:rw
      - filegator_private:/var/www/filegator/private:rw

volumes:
  portainer_data:
  filegator_private:
